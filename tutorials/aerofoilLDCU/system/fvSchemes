/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2406                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      fvSchemes;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

ddtSchemes
{
    default         Euler;
}

gradSchemes
{
    default         Gauss linear;

    limited         cellLimited Gauss linear 1;
    grad(U)         $limited;
    grad(k)         $limited;
    grad(omega)     $limited;
}

divSchemes
{
    default         none;

    div(phi,U)      Gauss linearUpwind limited;

    // LDCU flux-based convection (used by the custom solver)
    // Mirror the same schemes as for standard phi
    div(phiLDCU,U)      Gauss linearUpwind limited;
    // Turbulence model uses the flux passed at construction (phiTurb)
    // Provide matching entries for that name as well
    div(phiTurb,U)      Gauss linearUpwind limited;

    energy          Gauss linearUpwind limited;
    div(phi,e)      $energy;
    div(phi,K)      $energy;
    div(phi,Ekp)    $energy;
    div(phiLDCU,e)      $energy;
    div(phiLDCU,K)      $energy;
    div(phiTurb,e)      $energy;
    div(phiTurb,K)      $energy;

    turbulence      Gauss linearUpwind limited;
    div(phi,k)      $turbulence;
    div(phi,omega)  $turbulence;
    div(phiLDCU,k)      $turbulence;
    div(phiLDCU,omega)  $turbulence;
    div(phiTurb,k)      $turbulence;
    div(phiTurb,omega)  $turbulence;

    div(phiv,p)     Gauss upwind;
    div((phi|interpolate(rho)),p) Gauss upwind;

    div(((rho*nuEff)*dev2(T(grad(U)))))    Gauss linear;
}

laplacianSchemes
{
    default         Gauss linear corrected;
}

interpolationSchemes
{
    default         linear;
}

snGradSchemes
{
    default         corrected;
}

wallDist
{
    method          meshWave;
}


// ************************************************************************* //
