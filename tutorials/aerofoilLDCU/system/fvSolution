/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2406                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      fvSolution;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

solvers
{
    p
    {
        solver          GAMG;
        smoother        GaussSeidel;
        tolerance       1e-6;
        relTol          0.01;
    }

    pFinal
    {
        $p;
        relTol          0;
    }

    // Symmetric matrices (explicit convection): use PCG/DIC or smoothSolver
    U
    {
        solver          smoothSolver;
        smoother        symGaussSeidel;
        tolerance       1e-6;
        relTol          0.1;
    }

    UFinal
    {
        $U;
        relTol          0;
    }

    e
    {
        solver          smoothSolver;
        smoother        symGaussSeidel;
        tolerance       1e-6;
        relTol          0.1;
    }

    eFinal
    {
        $e;
        relTol          0;
    }

    // Scalars typically remain asymmetric in turbulence models
    k
    {
        solver          PBiCGStab;
        preconditioner  DILU;
        tolerance       1e-6;
        relTol          0.1;
    }

    kFinal
    {
        $k;
        relTol          0;
    }

    omega
    {
        solver          PBiCGStab;
        preconditioner  DILU;
        tolerance       1e-6;
        relTol          0.1;
    }

    omegaFinal
    {
        $omega;
        relTol          0;
    }

    // Rho often solved diagonally; keep a generic fallback
    rho
    {
        solver          diagonal;
    }

    rhoFinal
    {
        $rho;
        relTol          0;
    }
}

SIMPLE
{
    residualControl
    {
        p               1e-4;
        U               1e-4;
        "(k|omega|e)"   1e-4;
    }

    nNonOrthogonalCorrectors 0;
    pMinFactor      0.1;
    pMaxFactor      2;
}

PIMPLE
{
    nCorrectors              2;
    nNonOrthogonalCorrectors 1;
    nOuterCorrectors         1;
    pMinFactor      0.1;
    pMaxFactor      2;
}

relaxationFactors
{
    equations
    {
        ".*"     1;
    }
}


// ************************************************************************* //
